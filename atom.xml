<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wsblog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-04-24T02:49:30.262Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Wang Song</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Colab的使用</title>
    <link href="http://example.com/2025/04/24/colab/"/>
    <id>http://example.com/2025/04/24/colab/</id>
    <published>2025-04-24T02:11:12.000Z</published>
    <updated>2025-04-24T02:49:30.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Colab"><a href="#关于Colab" class="headerlink" title="关于Colab"></a>关于Colab</h1><p>Google Colab是谷歌提供的免费Jupyter 笔记本环境，不需要什么设置与环境配置就可以使用，完全在云端运行。不影响本地的使用。</p><p>Google Colab为研究者提供一定免费的GPU，可以编写和执行代码，所有这些都可通过浏览器免费使用。同学们可以在上面轻松地跑 Tensorflow、Pytorch 等深度学习框架。</p><p>尽管Google Colab提供了一定的免费资源，但资源量是受限制的，所有 Colab 运行时都会在一段时间后重置。Colab Pro 订阅者的使用量仍会受到限制，但相比非订阅者可享有的限额要多出大约一倍。Colab Pro+ 订阅者还可获享更高的稳定性。</p><h1 id="关于Google-Driver"><a href="#关于Google-Driver" class="headerlink" title="关于Google Driver"></a>关于Google Driver</h1><p>google云端硬盘，也称为谷歌云端硬盘，是互联网巨头谷歌公司推出的一项在线云存储服务，英文全称是Google Drive。目前有免费和付费两种模式，免费用户可以获取15G的空间，付费用户根据套餐可以选择最大20TB的储存空间</p><h1 id="利用colab进行fastai课程中的代码运行"><a href="#利用colab进行fastai课程中的代码运行" class="headerlink" title="利用colab进行fastai课程中的代码运行"></a>利用colab进行fastai课程中的代码运行</h1><p>因为本来为教学课程为了快速上手并没有充分的时间进行环境的配置，同时我的gpu也并非一个较好的水位（rtx2060），加上之前在复现论文时用过colab的免费服务，被google的慷慨和大方震惊，故在进行deeping learning的课程学习时也准备使用colab进行代码的操作。</p><h2 id="step-1-在github-fastbook项目主页下选择对应的学习章节"><a href="#step-1-在github-fastbook项目主页下选择对应的学习章节" class="headerlink" title="step 1:在github fastbook项目主页下选择对应的学习章节"></a>step 1:在github fastbook项目主页下选择对应的学习章节</h2><p>选择对应的学习章节进行打开即可转移到相应的项目colab。</p><p><img src="/image/colab_01.jpg" alt="github主页课程选择"></p><p>需要注意这个课程选择的主页仅当主页语言为英文时才会出现。</p><h2 id="step2-在进入colab页面后选择托管硬件为gpu"><a href="#step2-在进入colab页面后选择托管硬件为gpu" class="headerlink" title="step2 :在进入colab页面后选择托管硬件为gpu"></a>step2 :在进入colab页面后选择托管硬件为gpu</h2><p>点击 代码执行程序 —&gt; 更改运行时类型 —&gt;选择 T4 GPU(当然土豪是随意 充钱即可享受更强大的gpu)</p><p>最后进行连接，点击需要测试的代码块，即可线上进行代码的测试</p><p><img src="/image/colab_02.jpg" alt="colab设置"></p><h1 id="colab测试运行结果"><a href="#colab测试运行结果" class="headerlink" title="colab测试运行结果"></a>colab测试运行结果</h1><p>在运行安装环境配置的代码块时出现了报错</p><p><img src="/image/colab_03.jpg" alt="error"></p><p>在forums.fast.ai论坛上进行查找发现该问题并不影响后续程序的执行</p><p><img src="/image/colab_04.jpg" alt="anser"></p><p>执行第一个进行cnn网络训练得到猫狗识别的模型的程序结果</p><p><img src="/image/colab_05.jpg" alt="result"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>完成了深度学习的重要的一步在线上对代码进行运行，在目前算力设备都极其昂贵的背景下，选择线上的代码服务进行模型的训练显得尤其具有性价比，掌握该项技能能够使得我的科研和工作突破某些因为算力不足的限制，同时对于学习更加的方便。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于Colab&quot;&gt;&lt;a href=&quot;#关于Colab&quot; class=&quot;headerlink&quot; title=&quot;关于Colab&quot;&gt;&lt;/a&gt;关于Colab&lt;/h1&gt;&lt;p&gt;Google Colab是谷歌提供的免费Jupyter 笔记本环境，不需要什么设置与环境配置就可以使</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Fastai Chapter 2</title>
    <link href="http://example.com/2025/04/24/fastaichapter2/"/>
    <id>http://example.com/2025/04/24/fastaichapter2/</id>
    <published>2025-04-24T00:58:03.000Z</published>
    <updated>2025-04-25T03:36:06.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本章主要探讨的是深度学习的实践，我们需要知道深度学习的能力和限制，以至于让我们我至于低估或是对深度学习的能力和限制有过高的期盼。</p><h1 id="从模型到生成"><a href="#从模型到生成" class="headerlink" title="从模型到生成"></a>从模型到生成</h1><p>在本章中，我们将使用一个计算机视觉示例来查看创建深度学习应用的端到端过程。更具体地说，我们将构建一个熊分类器！在这个过程中，我们将讨论深度学习的能力和限制，探讨如何创建数据集，在实践中使用深度学习时可能遇到的问题等等。许多关键点同样适用于其他深度学习问题，例如第一章中的问题。如果您解决的问题在关键方面类似于我们的示例问题，我们期望您可以快速获得极好的结果，而只需很少的代码。</p><h1 id="开始深度学习的项目"><a href="#开始深度学习的项目" class="headerlink" title="开始深度学习的项目"></a>开始深度学习的项目</h1><p>首先开始深度学习像是在制作一份独属于你自己的三明治！（尽管他可能没有那么好吃！但是你必须会自己做它！）只有通过处理自己的项目，您才能获得构建和使用模型的真实经验。</p><p>就像做三明治一样，你不可能找到一块完美的火腿或者是生菜进行制作。（一个切的薄厚不均的火腿片或是不太完整的生菜可能并不会影响三明治的味道所以告别完美主义不要让你的工作停滞不前）</p><p>无论您是为了自己的学习还是为了在组织中的实际应用而进行项目，您都希望能够快速开始。我们看到许多学生、研究人员和行业从业者在试图找到他们完美的数据集时浪费了几个月甚至几年的时间。目标不是找到“完美”的数据集或项目，而只是开始并从那里迭代。如果您采取这种方法，您将在完美主义者仍处于规划阶段时进行第三次迭代学习和改进！</p><p>我们还建议您在项目中端到端迭代；不要花几个月来微调您的模型，或打磨完美的 GUI，或标记完美的数据集……相反，尽可能在合理的时间内完成每一步，一直到最后。例如，如果您的最终目标是一个在手机上运行的应用程序，那么每次迭代后您都应该拥有这个。但也许在早期迭代中您会采取捷径；例如，在远程服务器上进行所有处理，并使用简单的响应式 Web 应用程序。通过完成项目的端到端，您将看到最棘手的部分在哪里，以及哪些部分对最终结果产生最大影响。</p><h1 id="Sylvain’s-tips"><a href="#Sylvain’s-tips" class="headerlink" title="Sylvain’s tips"></a>Sylvain’s tips</h1><p>刚开始的时候应该选择一个熟悉的你能接触到大量数据的领域，如果没有也应该选择一个已经被应用于深度学习的领域。不然你就会和无头苍蝇一样不知道自己错在哪里。</p><h1 id="深度学习应用的领域分析（书的日期为2020年但现在是2025年我会结合自己的一些项目经历进行分析）"><a href="#深度学习应用的领域分析（书的日期为2020年但现在是2025年我会结合自己的一些项目经历进行分析）" class="headerlink" title="深度学习应用的领域分析（书的日期为2020年但现在是2025年我会结合自己的一些项目经历进行分析）"></a>深度学习应用的领域分析（书的日期为2020年但现在是2025年我会结合自己的一些项目经历进行分析）</h1><h2 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h2><p>书中说到：深度学习尚未用于分析图像的许多领域，但在已经尝试过的领域中，几乎普遍表明计算机可以至少与人类一样好地识别图像中的物品，甚至是经过专门训练的人，如放射科医生。这被称为<em>物体识别</em>。深度学习还擅长识别图像中物体的位置，并可以突出它们的位置并命名每个找到的物体。这被称为<em>物体检测</em>（在我们在第一章中看到的变体中，每个像素根据其所属的对象类型进行分类—这被称为<em>分割</em>）。</p><p>深度学习算法通常不擅长识别结构或风格与用于训练模型的图像明显不同的图像。例如，如果训练数据中没有黑白图像，模型可能在黑白图像上表现不佳。同样，如果训练数据不包含手绘图像，模型可能在手绘图像上表现不佳。没有一般方法可以检查训练集中缺少哪些类型的图像，但我们将在本章中展示一些方法，以尝试识别当模型在生产中使用时数据中出现意外图像类型的情况（这被称为检查<em>域外</em>数据）。</p><p>物体检测系统面临的一个主要挑战是图像标记可能会很慢且昂贵。目前有很多工作正在进行中，旨在开发工具以尝试使这种标记更快速、更容易，并且需要更少的手工标签来训练准确的物体检测模型。一个特别有帮助的方法是合成生成输入图像的变化，例如通过旋转它们或改变它们的亮度和对比度；这被称为<em>数据增强</em>，并且对文本和其他类型的模型也很有效。我们将在本章中详细讨论这一点。</p><p>另一个要考虑的问题是，尽管您的问题可能看起来不像是一个计算机视觉问题，但通过一点想象力可能可以将其转变为一个。例如，如果您要分类的是声音，您可以尝试将声音转换为其声学波形的图像，然后在这些图像上训练模型。</p><p><strong><em>但是实际上现在深度学习在计算机视觉的领域目前在繁荣发展就我而言所使用过的yolo视觉模型简直的惊为天人的存在</em></strong></p><h2 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h2><p>计算机擅长基于类别对短文档和长文档进行分类，例如垃圾邮件或非垃圾邮件、情感（例如，评论是积极的还是消极的）、作者、来源网站等。我们不知道在这个领域是否有任何严格的工作来比较计算机和人类，但从经验上看，我们认为深度学习的性能在这些任务上与人类的性能相似。</p><p>深度学习还擅长生成与上下文相关的文本，例如回复社交媒体帖子，并模仿特定作者的风格。它还擅长使这些内容对人类具有吸引力—事实上，甚至比人类生成的文本更具吸引力。然而，深度学习不擅长生成<em>正确</em>的回应！例如，我们没有可靠的方法来将医学信息知识库与深度学习模型结合起来，以生成医学上正确的自然语言回应。这是危险的，因为很容易创建对外行人看来具有吸引力但实际上完全不正确的内容。</p><p>另一个问题是，社交媒体上的上下文适当、高度引人入胜的回应可能被大规模使用——比以前见过的任何喷子农场规模大几千倍——来传播虚假信息，制造动荡，鼓励冲突。一般来说，文本生成模型总是在技术上略领先于识别自动生成文本的模型。例如，可以使用一个能够识别人工生成内容的模型来实际改进创建该内容的生成器，直到分类模型无法完成其任务为止。</p><p>尽管存在这些问题，深度学习在自然语言处理中有许多应用：可以用来将文本从一种语言翻译成另一种语言，将长篇文档总结为更快消化的内容，找到感兴趣概念的所有提及等。不幸的是，翻译或总结可能包含完全错误的信息！然而，性能已经足够好，许多人正在使用这些系统——例如，谷歌的在线翻译系统（以及我们所知道的每个其他在线服务）都是基于深度学习的。</p><p><strong><em><font color=Bred>原来早在深度学习提出之除就发现其在大语言模型上的潜力更加强大，要是早读这本书我就早买大语言模型企业的股票飞黄腾达了，果然还是要多看书QAQ</font></em></strong></p><h2 id="结合文本和图像"><a href="#结合文本和图像" class="headerlink" title="结合文本和图像"></a>结合文本和图像</h2><p>深度学习将文本和图像结合成一个单一模型的能力通常比大多数人直觉期望的要好得多。例如，一个深度学习模型可以在输入图像上进行训练，输出用英语编写的标题，并且可以学会为新图像自动生成令人惊讶地适当的标题！但是，我们再次提出与前一节讨论的相同警告：不能保证这些标题是正确的。</p><p>由于这个严重问题，我们通常建议深度学习不要作为完全自动化的过程，而是作为模型和人类用户密切互动的过程的一部分。这可能使人类的生产力比完全手动方法高出几个数量级，并且比仅使用人类更准确。</p><p>例如，自动系统可以直接从 CT 扫描中识别潜在的中风患者，并发送高优先级警报，以便快速查看这些扫描。治疗中风只有三个小时的时间窗口，因此这种快速的反馈循环可以挽救生命。同时，所有扫描仍然可以按照通常的方式发送给放射科医生，因此不会减少人类的参与。其他深度学习模型可以自动测量扫描中看到的物品，并将这些测量结果插入报告中，警告放射科医生可能错过的发现，并告诉他们可能相关的其他病例。</p><p><strong><em><font color=Bred>这是我作为研究生阶段最关心的点，讲真的把这个用在机器人身上非常的酷</font></em></strong></p><h2 id="表格数据"><a href="#表格数据" class="headerlink" title="表格数据"></a>表格数据</h2><p>对于分析时间序列和表格数据，深度学习最近取得了巨大进展。然而，深度学习通常作为多种模型集成的一部分使用。如果您已经有一个正在使用随机森林或梯度提升机（流行的表格建模工具，您很快将了解）的系统，那么切换到或添加深度学习可能不会带来任何显著的改进。</p><p>深度学习确实大大增加了您可以包含的列的种类——例如，包含自然语言（书名、评论等）和高基数分类列（即包含大量离散选择的内容，如邮政编码或产品 ID）。不过，与随机森林或梯度提升机相比，深度学习模型通常需要更长的训练时间，尽管由于提供 GPU 加速的库（如<a href="https://rapids.ai">RAPIDS</a>），情况正在改变。我们在第九章中详细介绍了所有这些方法的优缺点。</p><p><strong><em><font color=Bred>或许等我走头无路开路边摊的时候可以设计一个来控制我的成本</font></em></strong></p><h2 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h2><p>推荐系统实际上只是一种特殊类型的表格数据。特别是，它们通常具有代表用户的高基数分类变量，以及代表产品（或类似物品）的另一个变量。像亚马逊这样的公司将客户所做的每一次购买都表示为一个巨大的稀疏矩阵，其中客户是行，产品是列。一旦他们以这种格式拥有数据，数据科学家们会应用某种形式的协同过滤来填充矩阵。例如，如果客户 A 购买产品 1 和 10，客户 B 购买产品 1、2、4 和 10，引擎将推荐 A 购买 2 和 4。</p><p>由于深度学习模型擅长处理高基数分类变量，它们非常擅长处理推荐系统。尤其是当将这些变量与其他类型的数据（如自然语言或图像）结合时，它们就像处理表格数据一样发挥作用。它们还可以很好地将所有这些类型的信息与其他元数据（如用户信息、先前交易等）表示为表格进行组合。</p><p>然而，几乎所有的机器学习方法都有一个缺点，那就是它们只告诉你一个特定用户可能喜欢哪些产品，而不是对用户有用的推荐。用户可能喜欢的产品的许多种推荐可能根本不会有任何帮助——例如，如果用户已经熟悉这些产品，或者如果它们只是用户已经购买过的产品的不同包装（例如，当他们已经拥有该套装中的每一件物品时，推荐一个小说的套装）。Jeremy 喜欢读特里·普拉切特的书，有一段时间亚马逊一直在向他推荐特里·普拉切特的书，这实际上并不是有用的，因为他已经知道这些书了！</p><p><strong><em><font color=Bred>愚蠢的b站视频推荐算法就是这样的。我都已经考上了研究生他还一直给我推考研的视频</font></em></strong></p><h3 id="其他数据类型"><a href="#其他数据类型" class="headerlink" title="其他数据类型"></a>其他数据类型</h3><p>通常，您会发现特定领域的数据类型非常适合现有的类别。例如，蛋白质链看起来很像自然语言文档，因为它们是由复杂关系和意义贯穿整个序列的离散令牌组成的长序列。事实上，使用 NLP 深度学习方法是许多类型蛋白质分析的最先进方法。另一个例子，声音可以表示为频谱图，可以被视为图像；标准的图像深度学习方法在频谱图上表现得非常好。</p><p><strong><em><font color=Bred>讲真的这个非常的神奇感觉生物和控制结合在一起大有所为！！！快去买生物科技公司的股票！！！！</font></em></strong></p><h2 id="驱动系统方法"><a href="#驱动系统方法" class="headerlink" title="驱动系统方法"></a>驱动系统方法</h2><p>许多准确的模型对任何人都没有用，而许多不准确的模型却非常有用。为了确保您的建模工作在实践中有用，您需要考虑您的工作将如何使用。2012 年，Jeremy 与 Margit Zwemer 和 Mike Loukides 一起提出了一种称为<em>驱动系统方法</em>的思考这个问题的方法。</p><p>驱动系统方法，如图 2-2 所示，详细介绍在<a href="https://oreil.ly/KJIIa">“设计出色的数据产品”</a>中。基本思想是从考虑您的目标开始，然后考虑您可以采取哪些行动来实现该目标以及您拥有的（或可以获取的）可以帮助的数据，然后构建一个模型，您可以使用该模型确定为实现目标而采取的最佳行动。</p><p><img src="/image/dlcf_0202.png" alt=""></p><h6 id="图-2-2-驱动系统方法"><a href="#图-2-2-驱动系统方法" class="headerlink" title="图 2-2. 驱动系统方法"></a>图 2-2. 驱动系统方法</h6><p>考虑自动驾驶汽车中的模型：您希望帮助汽车安全地从 A 点驾驶到 B 点，而无需人为干预。出色的预测建模是解决方案的重要组成部分，但它并不是独立存在的；随着产品变得更加复杂，它会消失在管道中。使用自动驾驶汽车的人完全不知道使其运行的数百（甚至数千）个模型和海量数据。但随着数据科学家构建越来越复杂的产品，他们需要一种系统化的设计方法。</p><p>我们使用数据不仅仅是为了生成更多数据（以预测的形式），而是为了产生可操作的结果。这是 Drivetrain 方法的目标。首先要明确定义一个明确的目标。例如，当谷歌创建其第一个搜索引擎时，考虑了“用户在输入搜索查询时的主要目标是什么？”这导致了谷歌的目标，即“显示最相关的搜索结果”。下一步是考虑您可以拉动的杠杆（即您可以采取的行动）以更好地实现该目标。在谷歌的情况下，这是搜索结果的排名。第三步是考虑他们需要什么新数据来生成这样的排名；他们意识到关于哪些页面链接到哪些其他页面的隐含信息可以用于此目的。</p><p>只有在完成了这前三个步骤之后，我们才开始考虑构建预测模型。我们的目标和可用的杠杆，我们已经拥有的数据以及我们需要收集的额外数据，决定了我们可以构建的模型。这些模型将以杠杆和任何不可控变量作为输入；模型的输出可以结合起来预测我们的目标的最终状态。</p><p>让我们考虑另一个例子：推荐系统。推荐引擎的目标是通过推荐客户不会在没有推荐的情况下购买的物品来推动额外的销售。杠杆是推荐的排名。必须收集新数据以生成将导致新销售的推荐。这将需要进行许多随机实验，以收集关于各种客户的各种推荐的数据。这是很少有组织采取的一步；但是没有它，您就没有所需的信息来根据您的真正目标（更多销售！）优化推荐。</p><p>最后，您可以为购买概率构建两个模型，条件是看到或没有看到推荐。这两个概率之间的差异是给定推荐给客户的效用函数。在算法推荐客户已经拒绝的熟悉书籍（两个组成部分都很小）或者他们本来就会购买的书籍（两个组成部分都很大并互相抵消）的情况下，效用函数会很低。</p><p>正如您所看到的，在实践中，您的模型的实际实施通常需要比仅仅训练一个模型更多！您通常需要运行实验来收集更多数据，并考虑如何将您的模型整合到您正在开发的整个系统中。说到数据，现在让我们专注于如何为您的项目找到数据。</p><h1 id="保持自己能够获取互联网图像"><a href="#保持自己能够获取互联网图像" class="headerlink" title="保持自己能够获取互联网图像"></a>保持自己能够获取互联网图像</h1><p>这里需要高校验证来获取免费的Azure的bing图像搜索api的服务（今天才发现我没有高校邮箱现在申请不知道几天可以申请下来）。所以下面需要用到api的代码我就不运行了。<font color=red>欠着等申请下了在运行</font><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&#x27;XXX&#x27;</span></span><br></pre></td></tr></table></figure></p><p>或者，如果您在命令行上感到自在，您可以在终端中设置它</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export AZURE_SEARCH_KEY=*your_key_here*</span><br></pre></td></tr></table></figure><p>然后重新启动 Jupyter 服务器，在一个单元格中键入以下内容，并执行：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key = os.environ[<span class="string">&#x27;AZURE_SEARCH_KEY&#x27;</span>]</span><br></pre></td></tr></table></figure><p>设置了<code>key</code>之后，您可以使用<code>search_images_bing</code>。这个函数是在线笔记本中包含的小<code>utils</code>类提供的（如果您不确定一个函数是在哪里定义的，您可以在笔记本中输入它来找出，如下所示）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_images_bing</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;function utils.search_images_bing(key, term, min_sz=<span class="number">128</span>)&gt;</span><br></pre></td></tr></table></figure><p>让我们尝试一下这个函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = search_images_bing(key, <span class="string">&#x27;grizzly bear&#x27;</span>)</span><br><span class="line">ims = results.attrgot(<span class="string">&#x27;content_url&#x27;</span>)</span><br><span class="line"><span class="built_in">len</span>(ims)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">150</span></span><br></pre></td></tr></table></figure><p>我们已成功下载了 150 只灰熊的 URL（或者至少是 Bing 图像搜索为该搜索词找到的图像）。让我们看一个：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dest = <span class="string">&#x27;images/grizzly.jpg&#x27;</span></span><br><span class="line">download_url(ims[<span class="number">0</span>], dest)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">im = Image.<span class="built_in">open</span>(dest)</span><br><span class="line">im.to_thumb(<span class="number">128</span>,<span class="number">128</span>)</span><br></pre></td></tr></table></figure><p><img src="/image/dlcf_02in01.png" alt=""></p><p>这似乎运行得很好，所以让我们使用 fastai 的<code>download_images</code>来下载每个搜索词的所有 URL。我们将每个放在一个单独的文件夹中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bear_types = <span class="string">&#x27;grizzly&#x27;</span>,<span class="string">&#x27;black&#x27;</span>,<span class="string">&#x27;teddy&#x27;</span></span><br><span class="line">path = Path(<span class="string">&#x27;bears&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> path.exists():</span><br><span class="line">    path.mkdir()</span><br><span class="line">    <span class="keyword">for</span> o <span class="keyword">in</span> bear_types:</span><br><span class="line">        dest = (path/o)</span><br><span class="line">        dest.mkdir(exist_ok=<span class="literal">True</span>)</span><br><span class="line">        results = search_images_bing(key, <span class="string">f&#x27;<span class="subst">&#123;o&#125;</span> bear&#x27;</span>)</span><br><span class="line">        download_images(dest, urls=results.attrgot(<span class="string">&#x27;content_url&#x27;</span>))</span><br></pre></td></tr></table></figure><p>我们的文件夹中有图像文件，正如我们所期望的那样：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fns = get_image_files(path)</span><br><span class="line">fns</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="comment">#421) [Path(&#x27;bears/black/00000095.jpg&#x27;),Path(&#x27;bears/black/00000133.jpg&#x27;),Path(&#x27;</span></span><br><span class="line"> &gt; bears/black/<span class="number">00000062.j</span>pg<span class="string">&#x27;),Path(&#x27;</span>bears/black/<span class="number">00000023.j</span>pg<span class="string">&#x27;),Path(&#x27;</span>bears/black</span><br><span class="line"> &gt; /<span class="number">00000029.j</span>pg<span class="string">&#x27;),Path(&#x27;</span>bears/black/<span class="number">00000094.j</span>pg<span class="string">&#x27;),Path(&#x27;</span>bears/black/<span class="number">00000124.j</span></span><br><span class="line"> &gt; pg<span class="string">&#x27;),Path(&#x27;</span>bears/black/<span class="number">00000056.j</span>peg<span class="string">&#x27;),Path(&#x27;</span>bears/black/<span class="number">00000046.j</span>pg<span class="string">&#x27;),Path(</span></span><br><span class="line"><span class="string"> &gt; &#x27;</span>bears/black/<span class="number">00000045.j</span>pg<span class="string">&#x27;)...]</span></span><br></pre></td></tr></table></figure><h1 id="Jeremy-说"><a href="#Jeremy-说" class="headerlink" title="Jeremy 说"></a>Jeremy 说</h1><p>我就是喜欢在 Jupyter 笔记本中工作的这一点！逐步构建我想要的东西并在每一步检查我的工作是如此容易。我犯了<em>很多</em>错误，所以这对我真的很有帮助。</p><p>通常当我们从互联网下载文件时，会有一些文件损坏。让我们检查一下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">failed = verify_images(fns)</span><br><span class="line">failed</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="comment">#0) []</span></span><br></pre></td></tr></table></figure><p>要删除所有失败的图像，您可以使用<code>unlink</code>。像大多数返回集合的 fastai 函数一样，<code>verify_images</code>返回一个类型为<code>L</code>的对象，其中包括<code>map</code>方法。这会在集合的每个元素上调用传递的函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed.<span class="built_in">map</span>(Path.unlink);</span><br></pre></td></tr></table></figure><p>在这个过程中要注意的一件事是：正如我们在第一章中讨论的，模型只能反映用于训练它们的数据。而世界充满了有偏见的数据，这最终会反映在，例如，Bing 图像搜索（我们用来创建数据集的）。例如，假设您有兴趣创建一个应用程序，可以帮助用户确定他们是否拥有健康的皮肤，因此您训练了一个模型，该模型基于搜索结果（比如）“健康皮肤”。图 2-3 展示了您将获得的结果类型。</p><p><img src="/image/dlcf_0203.png" alt=""></p><h6 id="图-2-3-用于健康皮肤检测器的数据？"><a href="#图-2-3-用于健康皮肤检测器的数据？" class="headerlink" title="图 2-3. 用于健康皮肤检测器的数据？"></a>图 2-3. 用于健康皮肤检测器的数据？</h6><p>使用此作为训练数据，您最终不会得到一个健康皮肤检测器，而是一个<em>年轻白人女性触摸她的脸</em>检测器！一定要仔细考虑您可能在应用程序中实际看到的数据类型，并仔细检查以确保所有这些类型都反映在您模型的源数据中。（感谢 Deb Raji 提出了健康皮肤的例子。请查看她的论文<a href="https://oreil.ly/POS_C">“可操作的审计：调查公开命名商业 AI 产品偏见性能结果的影响”</a>以获取更多有关模型偏见的迷人见解。）</p><p>现在我们已经下载了一些数据，我们需要将其组装成适合模型训练的格式。在 fastai 中，这意味着创建一个名为<code>DataLoaders</code>的对象。</p><h1 id="术语：DataLoaders"><a href="#术语：DataLoaders" class="headerlink" title="术语：DataLoaders"></a>术语：DataLoaders</h1><p>一个 fastai 类，存储您传递给它的多个<code>DataLoader</code>对象——通常是一个<code>train</code>和一个<code>valid</code>，尽管可以有任意数量。前两个作为属性提供。</p><p>在本书的后面，您还将了解<code>Dataset</code>和<code>Datasets</code>类，它们具有相同的关系。要将我们下载的数据转换为<code>DataLoaders</code>对象，我们至少需要告诉 fastai 四件事：</p><ul><li><p>我们正在处理什么类型的数据</p></li><li><p>如何获取项目列表</p></li><li><p>如何为这些项目打标签</p></li><li><p>如何创建验证集</p></li></ul><p>到目前为止，我们已经看到了一些特定组合的<em>工厂方法</em>，当您有一个应用程序和数据结构恰好适合这些预定义方法时，这些方法非常方便。当您不适用时，fastai 有一个名为<em>数据块 API</em>的极其灵活的系统。使用此 API，您可以完全自定义创建<code>DataLoaders</code>的每个阶段。这是我们需要为刚刚下载的数据集创建<code>DataLoaders</code>的步骤：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bears = DataBlock(</span><br><span class="line">    blocks=(ImageBlock, CategoryBlock),</span><br><span class="line">    get_items=get_image_files,</span><br><span class="line">    splitter=RandomSplitter(valid_pct=<span class="number">0.2</span>, seed=<span class="number">42</span>),</span><br><span class="line">    get_y=parent_label,</span><br><span class="line">    item_tfms=Resize(<span class="number">128</span>))</span><br></pre></td></tr></table></figure><p>让我们依次查看每个参数。首先，我们提供一个元组，指定我们希望独立变量和因变量的类型：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blocks=(ImageBlock, CategoryBlock)</span><br></pre></td></tr></table></figure><p><em>独立变量</em>是我们用来进行预测的东西，<em>因变量</em>是我们的目标。在这种情况下，我们的独立变量是一组图像，我们的因变量是每个图像的类别（熊的类型）。在本书的其余部分中，我们将看到许多其他类型的块。</p><p>对于这个<code>DataLoaders</code>，我们的基础项目将是文件路径。我们必须告诉 fastai 如何获取这些文件的列表。<code>get_image_files</code>函数接受一个路径，并返回该路径中所有图像的列表（默认情况下递归）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_items=get_image_files</span><br></pre></td></tr></table></figure><p>通常，您下载的数据集已经定义了验证集。有时，这是通过将用于训练和验证集的图像放入不同的文件夹中来完成的。有时，这是通过提供一个 CSV 文件，在该文件中，每个文件名都与应该在其中的数据集一起列出。有许多可以完成此操作的方法，fastai 提供了一种通用方法，允许您使用其预定义类之一或编写自己的类。</p><p>在这种情况下，我们希望随机拆分我们的训练和验证集。但是，我们希望每次运行此笔记本时都具有相同的训练/验证拆分，因此我们固定随机种子（计算机实际上不知道如何创建随机数，而只是创建看起来随机的数字列表；如果您每次都为该列表提供相同的起始点——称为<em>种子</em>，那么您将每次都获得完全相同的列表）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">splitter=RandomSplitter(valid_pct=<span class="number">0.2</span>, seed=<span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>自变量通常被称为<code>x</code>，因变量通常被称为<code>y</code>。在这里，我们告诉 fastai 要调用哪个函数来创建数据集中的标签：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_y=parent_label</span><br></pre></td></tr></table></figure><p><code>parent_label</code>是 fastai 提供的一个函数，它简单地获取文件所在文件夹的名称。因为我们将每个熊图像放入基于熊类型的文件夹中，这将为我们提供所需的标签。</p><p>我们的图像大小各不相同，这对深度学习是一个问题：我们不是一次向模型提供一个图像，而是多个图像（我们称之为<em>mini-batch</em>）。为了将它们分组到一个大数组（通常称为<em>张量</em>）中，以便通过我们的模型，它们都需要是相同的大小。因此，我们需要添加一个转换，将这些图像调整为相同的大小。<em>Item transforms</em>是在每个单独项目上运行的代码片段，无论是图像、类别还是其他。fastai 包含许多预定义的转换；我们在这里使用<code>Resize</code>转换，并指定大小为 128 像素：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">item_tfms=Resize(<span class="number">128</span>)</span><br></pre></td></tr></table></figure><p>这个命令给了我们一个<code>DataBlock</code>对象。这就像创建<code>DataLoaders</code>的<em>模板</em>。我们仍然需要告诉 fastai 我们数据的实际来源——在这种情况下，图像所在的路径：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dls = bears.dataloaders(path)</span><br></pre></td></tr></table></figure><p><code>DataLoaders</code>包括验证和训练<code>DataLoader</code>。<code>DataLoader</code>是一个类，它一次向 GPU 提供几个项目的批次。我们将在下一章中更多地了解这个类。当您循环遍历<code>DataLoader</code>时，fastai 会一次给您 64 个（默认值）项目，全部堆叠到一个单一张量中。我们可以通过在<code>DataLoader</code>上调用<code>show_batch</code>方法来查看其中一些项目：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dls.valid.show_batch(max_n=<span class="number">4</span>, nrows=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="image/dlcf_02in02.png" alt=""></p><p>默认情况下，<code>Resize</code>会将图像<em>裁剪</em>成适合请求大小的正方形形状，使用完整的宽度或高度。这可能会导致丢失一些重要细节。或者，您可以要求 fastai 用零（黑色）填充图像，或者压缩/拉伸它们：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bears = bears.new(item_tfms=Resize(<span class="number">128</span>, ResizeMethod.Squish))</span><br><span class="line">dls = bears.dataloaders(path)</span><br><span class="line">dls.valid.show_batch(max_n=<span class="number">4</span>, nrows=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="image/dlcf_02in03.png" alt=""></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bears = bears.new(item_tfms=Resize(<span class="number">128</span>, ResizeMethod.Pad, pad_mode=<span class="string">&#x27;zeros&#x27;</span>))</span><br><span class="line">dls = bears.dataloaders(path)</span><br><span class="line">dls.valid.show_batch(max_n=<span class="number">4</span>, nrows=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="image/dlcf_02in04.png" alt=""></p><p>所有这些方法似乎都有些浪费或问题。如果我们压缩或拉伸图像，它们最终会变成不现实的形状，导致模型学习到事物看起来与实际情况不同，这会导致更低的准确性。如果我们裁剪图像，我们会移除一些允许我们进行识别的特征。例如，如果我们试图识别狗或猫的品种，我们可能会裁剪掉区分相似品种所需的身体或面部的关键部分。如果我们填充图像，就会有很多空白空间，这对我们的模型来说只是浪费计算，并导致我们实际使用的图像部分具有较低的有效分辨率。</p><p>相反，我们在实践中通常做的是随机选择图像的一部分，然后裁剪到该部分。在每个纪元（即数据集中所有图像的完整遍历），我们随机选择每个图像的不同部分。这意味着我们的模型可以学习关注和识别图像中的不同特征。这也反映了图像在现实世界中的工作方式：同一物体的不同照片可能以略有不同的方式构图。</p><p>事实上，一个完全未经训练的神经网络对图像的行为一无所知。它甚至不认识当一个物体旋转一度时，它仍然是同一物体的图片！因此，通过训练神经网络使用物体在略有不同位置并且大小略有不同的图像的示例，有助于它理解物体的基本概念，以及如何在图像中表示它。</p><p>这里是另一个示例，我们将<code>Resize</code>替换为<code>RandomResizedCrop</code>，这是提供刚才描述行为的转换。传递的最重要参数是<code>min_scale</code>，它确定每次选择图像的最小部分：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bears = bears.new(item_tfms=RandomResizedCrop(<span class="number">128</span>, min_scale=<span class="number">0.3</span>))</span><br><span class="line">dls = bears.dataloaders(path)</span><br><span class="line">dls.train.show_batch(max_n=<span class="number">4</span>, nrows=<span class="number">1</span>, unique=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/image/dlcf_02in05.png" alt=""></p><p>在这里，我们使用了<code>unique=True</code>，以便将相同图像重复使用不同版本的<code>RandomResizedCrop</code>变换。</p><p><code>RandomResizedCrop</code>是更一般的数据增强技术的一个具体示例。</p><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><p><em>数据增强</em>指的是创建输入数据的随机变化，使它们看起来不同但不改变数据的含义。对于图像的常见数据增强技术包括旋转、翻转、透视变形、亮度变化和对比度变化。对于我们在这里使用的自然照片图像，我们发现一组标准的增强技术与<code>aug_transforms</code>函数一起提供，效果非常好。</p><p>因为我们的图像现在都是相同大小，我们可以使用 GPU 将这些增强应用于整个批次的图像，这将节省大量时间。要告诉 fastai 我们要在批次上使用这些变换，我们使用<code>batch_tfms</code>参数（请注意，在此示例中我们没有使用<code>RandomResizedCrop</code>，这样您可以更清楚地看到差异；出于同样的原因，我们使用了默认值的两倍的增强量）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bears = bears.new(item_tfms=Resize(<span class="number">128</span>), batch_tfms=aug_transforms(mult=<span class="number">2</span>))</span><br><span class="line">dls = bears.dataloaders(path)</span><br><span class="line">dls.train.show_batch(max_n=<span class="number">8</span>, nrows=<span class="number">2</span>, unique=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="image/dlcf_02in06.png" alt=""></p><p>现在我们已经将数据组装成适合模型训练的格式，让我们使用它来训练一个图像分类器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本章主要探讨的是深度学习的实践，我们需要知道深度学习的能力和限制，以至于让我们我至于低估或是对深度学习的能力和限制有过高的期盼。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Machine Learning  Deep Learning" scheme="http://example.com/tags/Machine-Learning-Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Fastai Chapter 1</title>
    <link href="http://example.com/2025/04/22/pytorch/"/>
    <id>http://example.com/2025/04/22/pytorch/</id>
    <published>2025-04-22T06:18:52.000Z</published>
    <updated>2025-04-24T01:01:09.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是机器学习？"><a href="#什么是机器学习？" class="headerlink" title="什么是机器学习？"></a>什么是机器学习？</h2><p>你的分类器是一个深度学习模型。正如已经提到的，深度学习模型使用神经网络，这些神经网络最初可以追溯到上世纪 50 年代，并且最近由于最新的进展变得非常强大。</p><p>另一个重要的背景是，深度学习只是更一般的<em>机器学习</em>领域中的一个现代领域。要理解当你训练自己的分类模型时所做的事情的本质，你不需要理解深度学习。看到你的模型和训练过程是如何成为适用于机器学习的概念的例子就足够了。</p><p>因此，在本节中，我们将描述机器学习。我们将探讨关键概念，并看看它们如何可以追溯到最初介绍它们的原始文章。</p><p><em>机器学习</em>就像常规编程一样，是让计算机完成特定任务的一种方式。但是如果要用常规编程来完成前面部分我们刚刚做的事情：在照片中识别狗和猫，我们将不得不为计算机写下完成任务所需的确切步骤。</p><p>通常，当我们编写程序时，很容易为我们写下完成任务的步骤。我们只需考虑如果我们必须手动完成任务时会采取的步骤，然后将它们转换为代码。例如，我们可以编写一个对列表进行排序的函数。一般来说，我们会编写一个类似于图 1-4 的函数（其中<em>inputs</em>可能是一个未排序的列表，<em>results</em>是一个排序后的列表）。</p><p><img src="/image/dlcf_0104.png" alt="管道输入、程序、结果"></p><h6 id="图-1-4-传统程序"><a href="#图-1-4-传统程序" class="headerlink" title="图 1-4. 传统程序"></a>图 1-4. 传统程序</h6><p>但是要在照片中识别物体，这有点棘手；当我们在图片中识别物体时，我们采取了什么步骤？我们真的不知道，因为这一切都发生在我们的大脑中，而我们并没有意识到！</p><p>早在计算机诞生之初，1949 年，IBM 的一位研究员阿瑟·塞缪尔开始研究一种让计算机完成任务的不同方式，他称之为<em>机器学习</em>。在他经典的 1962 年文章“人工智能：自动化的前沿”中，他写道：</p><blockquote><p>为这样的计算编程对于我们来说是相当困难的，主要不是因为计算机本身的任何固有复杂性，而是因为需要详细说明过程的每一个细微步骤。任何程序员都会告诉你，计算机是巨大的白痴，而不是巨大的大脑。</p></blockquote><p>他的基本想法是这样的：不是告诉计算机解决问题所需的确切步骤，而是向其展示解决问题的示例，并让它自己找出如何解决。结果证明这非常有效：到 1961 年，他的跳棋程序学到了很多，以至于击败了康涅狄格州冠军！这是他描述自己想法的方式（与之前提到的同一篇文章）：</p><blockquote><p>假设我们安排一些自动手段来测试任何当前权重分配的有效性，以实际表现为准，并提供一种机制来改变权重分配以最大化性能。我们不需要详细了解这种程序的细节，就可以看到它可以完全自动化，并且可以看到一个这样编程的机器将从中学习。</p></blockquote><p>这个简短陈述中嵌入了一些强大的概念：</p><ul><li><p>“权重分配”的想法</p></li><li><p>每个权重分配都有一些“实际表现”的事实</p></li><li><p>要求有一种“自动手段”来测试该性能</p></li><li><p>需要一个“机制”（即，另一个自动过程）来通过改变权重分配来提高性能</p></li></ul><p>让我们逐一了解这些概念，以便了解它们在实践中如何结合。首先，我们需要了解塞缪尔所说的<em>权重分配</em>是什么意思。</p><p>权重只是变量，权重分配是这些变量的特定值选择。程序的输入是它处理以产生结果的值，例如，将图像像素作为输入，并返回分类“狗”作为结果。程序的权重分配是定义程序操作方式的其他值。</p><p>因为它们会影响程序，它们在某种意义上是另一种输入。我们将更新我们的基本图片图 1-4，并用图 1-5 替换，以便考虑到这一点。</p><p><img src="/image/dlcf_0105.png" alt=""></p><h6 id="图-1-5。使用权重分配的程序"><a href="#图-1-5。使用权重分配的程序" class="headerlink" title="图 1-5。使用权重分配的程序"></a>图 1-5。使用权重分配的程序</h6><p>我们已将方框的名称从<em>程序</em>更改为<em>模型</em>。这是为了遵循现代术语并反映<em>模型</em>是一种特殊类型的程序：它可以根据<em>权重</em>做<em>许多不同的事情</em>。它可以以许多不同的方式实现。例如，在塞缪尔的跳棋程序中，不同的权重值会导致不同的跳棋策略。</p><p>（顺便说一句，塞缪尔所说的“权重”如今通常被称为模型<em>参数</em>，以防您遇到这个术语。术语<em>权重</em>保留给特定类型的模型参数。）</p><p>接下来，塞缪尔说我们需要一种<em>自动测试任何当前权重分配的有效性的方法，以实际表现为准</em>。在他的跳棋程序中，“实际表现”模型的表现有多好。您可以通过让两个模型相互对战并看哪个通常获胜来自动测试两个模型的表现。</p><p>最后，他说我们需要<em>一种机制来改变权重分配，以最大化性能</em>。例如，我们可以查看获胜模型和失败模型之间的权重差异，并将权重进一步调整到获胜方向。</p><p>我们现在可以看到他为什么说这样的程序<em>可以完全自动化，并且…一个这样编程的机器将从中学习</em>。当权重的调整也是自动的时，学习将变得完全自动——当我们不再通过手动调整权重来改进模型，而是依赖于根据性能产生调整的自动化机制时。</p><p>图 1-6 展示了塞缪尔关于训练机器学习模型的完整图景。</p><p>！基本训练循环</p><p><img src="/image/dlcf_0106.png" alt=""></p><h6 id="图-1-6。训练机器学习模型"><a href="#图-1-6。训练机器学习模型" class="headerlink" title="图 1-6。训练机器学习模型"></a>图 1-6。训练机器学习模型</h6><p>注意模型的<em>结果</em>（例如，在跳棋游戏中的移动）和其<em>性能</em>（例如，是否赢得比赛，或者赢得比赛的速度）之间的区别。</p><p>还要注意，一旦模型训练好了，也就是说，一旦我们选择了最终的、最好的、最喜欢的权重分配，那么我们可以将权重视为<em>模型的一部分</em>，因为我们不再对它们进行变化。</p><p>因此，实际上在训练后<em>使用</em>模型看起来像图 1-7。</p><p><img src="/image/dlcf_0107.png" alt=""></p><h6 id="图-1-7。使用训练后的模型作为程序"><a href="#图-1-7。使用训练后的模型作为程序" class="headerlink" title="图 1-7。使用训练后的模型作为程序"></a>图 1-7。使用训练后的模型作为程序</h6><p>这看起来与我们在图 1-4 中的原始图表相同，只是将<em>程序</em>一词替换为<em>模型</em>。这是一个重要的观点：<em>训练后的模型可以像常规计算机程序一样对待</em>。</p><h1 id="行话：机器学习"><a href="#行话：机器学习" class="headerlink" title="行话：机器学习"></a>行话：机器学习</h1><p>通过让计算机从经验中学习而不是通过手动编码个别步骤来开发程序的培训。</p><h2 id="什么是神经网络？"><a href="#什么是神经网络？" class="headerlink" title="什么是神经网络？"></a>什么是神经网络？</h2><p>不难想象跳棋程序的模型可能是什么样子。可能编码了一系列跳棋策略，以及某种搜索机制，然后权重可以变化以决定如何选择策略，在搜索期间关注棋盘的哪些部分等等。但是对于图像识别程序，或者理解文本，或者我们可能想象的许多其他有趣的问题，模型可能是什么样子却一点也不明显。</p><p>我们希望有一种函数，它如此灵活，以至于可以通过调整其权重来解决任何给定问题。令人惊讶的是，这种函数实际上存在！这就是我们已经讨论过的神经网络。也就是说，如果您将神经网络视为数学函数，那么它将是一种极其灵活的函数，取决于其权重。一种称为<em>通用逼近定理</em>的数学证明表明，这种函数在理论上可以解决任何问题，达到任何精度水平。神经网络如此灵活的事实意味着，在实践中，它们通常是一种合适的模型，您可以将精力集中在训练过程上，即找到良好的权重分配。</p><p>但是这个过程呢？人们可以想象，您可能需要为每个问题找到一种新的“机制”来自动更新权重。这将是费力的。我们在这里也希望有一种完全通用的方法来更新神经网络的权重，使其在任何给定任务上都能提高。方便的是，这也存在！</p><p>这被称为<em>随机梯度下降</em>（SGD）。我们将在第四章中详细了解神经网络和 SGD 的工作原理，以及解释通用逼近定理。然而，现在，我们将使用塞缪尔自己的话来说：<em>我们不需要深入了解这样一个过程的细节，就可以看到它可以完全自动化，并且可以看到这样一个机器编程的机器可以从中学习经验。</em></p><h1 id="杰里米说"><a href="#杰里米说" class="headerlink" title="杰里米说"></a>杰里米说</h1><p>不要担心；无论是 SGD 还是神经网络，在数学上都不复杂。它们几乎完全依赖于加法和乘法来完成工作（但它们进行了<em>大量</em>的加法和乘法！）。当学生们看到细节时，我们听到的主要反应是：“就是这样吗？”</p><p>换句话说，简而言之，神经网络是一种特殊类型的机器学习模型，它完全符合塞缪尔最初的构想。神经网络之所以特殊，是因为它们非常灵活，这意味着它们可以通过找到正确的权重来解决异常广泛的问题。这是强大的，因为随机梯度下降为我们提供了一种自动找到这些权重值的方法。</p><p>放大后，让我们现在缩小范围，重新审视使用塞缪尔框架解决我们的图像分类问题。</p><p>我们的输入是图像。我们的权重是神经网络中的权重。我们的模型是一个神经网络。我们的结果是由神经网络计算出的值，比如“狗”或“猫”。</p><p>下一个部分是什么，一个<em>自动测试任何当前权重分配的有效性的手段</em>？确定“实际表现”很容易：我们可以简单地将模型的表现定义为其在预测正确答案时的准确性。</p><p>将所有这些放在一起，假设 SGD 是我们更新权重分配的机制，我们可以看到我们的图像分类器是一个机器学习模型，就像 Samuel 所设想的那样。</p><h2 id="一些深度学习术语"><a href="#一些深度学习术语" class="headerlink" title="一些深度学习术语"></a>一些深度学习术语</h2><p>Samuel 在 1960 年代工作，自那时术语已经发生了变化。以下是我们讨论过的所有部分的现代深度学习术语：</p><ul><li><p><em>模型</em>的功能形式被称为<em>架构</em>（但要小心—有时人们将<em>模型</em>用作<em>架构</em>的同义词，这可能会让人困惑）。</p></li><li><p><em>权重</em>被称为<em>参数</em>。</p></li><li><p><em>预测</em>是从<em>独立变量</em>计算出来的，这是<em>不包括标签</em>的<em>数据</em>。</p></li><li><p>模型的<em>结果</em>被称为<em>预测</em>。</p></li><li><p><em>性能</em>的度量被称为<em>损失</em>。</p></li><li><p>损失不仅取决于预测，还取决于正确的<em>标签</em>（也称为<em>目标</em>或<em>因变量</em>）；例如，“狗”或“猫”。</p></li></ul><p>在进行这些更改后，我们在图 1-6 中的图表看起来像图 1-8。</p><p><img src="/image/dlcf_0108.png" alt=""></p><h6 id="图-1-8-详细训练循环"><a href="#图-1-8-详细训练循环" class="headerlink" title="图 1-8. 详细训练循环"></a>图 1-8. 详细训练循环</h6><h2 id="机器学习固有的限制"><a href="#机器学习固有的限制" class="headerlink" title="机器学习固有的限制"></a>机器学习固有的限制</h2><p>从这幅图片中，我们现在可以看到关于训练深度学习模型的一些基本事情：</p><ul><li><p>没有数据就无法创建模型。</p></li><li><p>模型只能学习操作训练数据中看到的模式。</p></li><li><p>这种学习方法只创建<em>预测</em>，而不是推荐的<em>行动</em>。</p></li><li><p>仅仅拥有输入数据的示例是不够的；我们还需要为这些数据提供<em>标签</em>（例如，仅有狗和猫的图片不足以训练模型；我们需要为每个图片提供一个标签，说明哪些是狗，哪些是猫）。</p></li></ul><p>一般来说，我们已经看到大多数组织声称他们没有足够的数据实际上意味着他们没有足够的<em>带标签</em>数据。如果任何组织有兴趣在实践中使用模型做一些事情，那么他们可能有一些输入数据计划运行他们的模型。并且可能他们已经以其他方式做了一段时间（例如，手动或使用一些启发式程序），因此他们有来自这些过程的数据！例如，放射学实践几乎肯定会有医学扫描的存档（因为他们需要能够检查他们的患者随时间的进展），但这些扫描可能没有包含诊断或干预措施列表的结构化标签（因为放射科医生通常创建自由文本自然语言报告，而不是结构化数据）。在本书中，我们将大量讨论标记方法，因为这在实践中是一个非常重要的问题。</p><p>由于这类机器学习模型只能进行<em>预测</em>（即试图复制标签），这可能导致组织目标与模型能力之间存在显著差距。例如，在本书中，您将学习如何创建一个<em>推荐系统</em>，可以预测用户可能购买的产品。这通常用于电子商务，例如通过显示排名最高的商品来定制主页上显示的产品。但这样的模型通常是通过查看用户及其购买历史（<em>输入</em>）以及他们最终购买或查看的内容（<em>标签</em>）来创建的，这意味着该模型很可能会告诉您关于用户已经拥有或已经了解的产品，而不是他们最有可能对其感兴趣的新产品。这与您当地书店的专家所做的事情大不相同，他们会询问您的口味，然后告诉您您以前从未听说过的作者或系列。</p><p>另一个关键的洞察来自于考虑模型如何与其环境互动。这可能会产生<em>反馈循环</em>，如此处所述：</p><ol><li><p>基于过去的逮捕地点创建了一个<em>预测性执法</em>模型。实际上，这并不是在预测犯罪，而是在预测逮捕，因此部分地只是反映了现有执法过程中的偏见。</p></li><li><p>然后执法人员可能会使用该模型来决定在哪里集中他们的执法活动，导致这些地区的逮捕增加。</p></li><li><p>这些额外逮捕的数据将被反馈回去重新训练未来版本的模型。</p></li></ol><p>这是一个<em>正反馈循环</em>：模型被使用得越多，数据就变得越有偏见，使模型变得更加有偏见，依此类推。</p><p>反馈循环也可能在商业环境中造成问题。例如，视频推荐系统可能会偏向于推荐由视频最大观看者消费的内容（例如，阴谋论者和极端分子倾向于观看比平均水平更多的在线视频内容），导致这些用户增加他们的视频消费量，进而导致更多这类视频被推荐。我们将在第三章中更详细地讨论这个话题。</p><p>既然你已经看到了理论的基础，让我们回到我们的代码示例，详细看看代码如何与我们刚刚描述的过程相对应。</p><h2 id="代码如何工作"><a href="#代码如何工作" class="headerlink" title="代码如何工作"></a>代码如何工作</h2><p>让我们看看我们的图像识别器代码如何映射到这些想法。我们将把每一行放入一个单独的单元格，并查看每一行正在做什么（我们暂时不会解释每个参数的每个细节，但会给出重要部分的描述；完整细节将在本书后面提供）。第一行导入了整个 fastai.vision 库：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastai.vision.<span class="built_in">all</span> <span class="keyword">import</span> * </span><br><span class="line"><span class="comment">#第一行导入了整个 fastai.vision 库，*代表导入所有的函数类变量，这通常在常规编程中不出现因为会造成很多的错误。</span></span><br><span class="line">path = untar_data(URLs.PETS)/<span class="string">&#x27;images&#x27;</span></span><br><span class="line"><span class="comment">#第二行从[fast.ai 数据集合](https://course.fast.ai/datasets)下载一个标准数据集（如果之前没有下载），将其提取出来（如果之前没有提取），并返回一个提取位置的`Path`对象。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_cat</span>(<span class="params">x</span>): <span class="keyword">return</span> x[<span class="number">0</span>].isupper()</span><br><span class="line"><span class="comment">#定义了一个函数`is_cat`，根据数据集创建者提供的文件名规则来标记猫，猫狗利用文件名大小写区分。</span></span><br><span class="line">dls = ImageDataLoaders.from_name_func(</span><br><span class="line">    path, get_image_files(path), valid_pct=<span class="number">0.2</span>, seed=<span class="number">42</span>,</span><br><span class="line">    label_func=is_cat, item_tfms=Resize(<span class="number">224</span>))</span><br><span class="line"><span class="comment">#第四行使用了这个函数，告诉 fastai 我们拥有什么类型的数据集以及它的结构</span></span><br><span class="line"><span class="comment">#调用`from_name_func`来实现（这意味着可以使用应用于文件名的函数来提取文件名），并传递`x[0].isupper()`，如果第一个字母是大写字母（即是猫），则评估为`True`。</span></span><br><span class="line"><span class="comment">#`valid_pct=0.2`。这告诉 fastai 保留 20%的数据，*完全不用于训练模型*。这 20%的数据被称为*验证集*；剩下的 80%被称为*训练集*。验证集用于衡量模型的准确性。</span></span><br><span class="line"><span class="comment">#参数`seed=42`将*随机种子*设置为每次运行此代码时相同的值，这意味着每次运行时我们都会得到相同的验证集，这样，如果我们更改模型并重新训练它，我们知道任何差异都是由于对模型的更改，而不是由于有不同的随机验证集。</span></span><br><span class="line">learn = cnn_learner(dls, resnet34, metrics=error_rate)</span><br><span class="line"><span class="comment">#第五行告诉 fastai 创建一个*卷积神经网络*（CNN），并指定要使用的*架构*（即要创建的模型类型）、我们要对其进行训练的数据以及要使用的*度量标准*。</span></span><br><span class="line"><span class="comment">#`cnn_learner`还有一个名为`pretrained`的参数，默认值为`True`（因此在这种情况下使用，即使我们没有指定），它将您模型中的权重设置为已经由专家训练过的值，以识别 130 万张照片中的一千个不同类别（使用著名的[*ImageNet*](http://www.image-net.org)数据集），即使用预训练模型。</span></span><br><span class="line">learn.fine_tune(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#第六行告诉 fastai 如何适应模型，自动使用微调技术。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不同类型的深度学习数据集和问题有各种类别，这里我们使用<code>ImageDataLoaders</code>。类名的第一部分通常是你拥有的数据类型，比如图像或文本。</p><p>我们必须告诉 fastai 的另一个重要信息是如何从数据集中获取标签。计算机视觉数据集通常以标签作为文件名或路径的一部分进行结构化，最常见的是父文件夹名称。fastai 带有许多标准化的标记方法，以及编写自己的方法。在这里，我们告诉 fastai 使用我们刚刚定义的<code>is_cat</code>函数。</p><p>最后，我们定义了我们需要的<code>Transform</code>。<code>Transform</code>包含在训练期间自动应用的代码；fastai 包含许多预定义的<code>Transform</code>，添加新的<code>Transform</code>就像创建一个 Python 函数一样简单。有两种类型：<code>item_tfms</code>应用于每个项目（在本例中，每个项目都被调整为 224 像素的正方形），而<code>batch_tfms</code>应用于一次处理一批项目的 GPU，因此它们特别快速（我们将在本书中看到许多这样的例子）。</p><p>为什么是 224 像素？出于历史原因（旧的预训练模型需要这个确切的尺寸），但你几乎可以传入任何尺寸。如果增加尺寸，通常会得到更好的模型结果（因为它可以关注更多细节），但代价是速度和内存消耗；如果减小尺寸，则相反。</p><p>为什么使用 CNN？这是创建计算机视觉模型的当前最先进方法。我们将在本书中学习有关 CNN 如何工作的所有知识。它们的结构受到人类视觉系统工作方式的启发。</p><p>在 fastai 中有许多架构，我们将在本书中介绍（以及讨论如何创建您自己的架构）。然而，大多数情况下，选择架构并不是深度学习过程中非常重要的部分。这是学术界喜欢谈论的内容，但实际上您不太可能需要花费太多时间。有一些标准架构在大多数情况下都有效，而在这种情况下，我们使用的是一种称为<em>ResNet</em>的架构，我们将在本书中大量讨论；它对许多数据集和问题都既快速又准确。<code>resnet34</code>中的<code>34</code>指的是该架构变体中的层数（其他选项是<code>18</code>、<code>50</code>、<code>101</code>和<code>152</code>）。使用层数更多的架构模型训练时间更长，更容易过拟合（即在验证集上的准确率开始变差之前无法训练多少个时期）。另一方面，当使用更多数据时，它们可能会更准确。</p><p>什么是度量标准？<em>度量标准</em>是一个函数，使用验证集来衡量模型预测的质量，并将在每个时期结束时打印出来。在这种情况下，我们使用<code>error_rate</code>，这是 fastai 提供的一个函数，它正是它所说的：告诉您验证集中有多少百分比的图像被错误分类。分类的另一个常见度量标准是<code>accuracy</code>（即<code>1.0 - error_rate</code>）。fastai 提供了许多其他度量标准，这将在本书中讨论。</p><p>度量标准的概念可能会让您想起<em>损失</em>，但有一个重要区别。损失的整个目的是定义一个“性能度量”，训练系统可以使用它来自动更新权重。换句话说，损失的一个好选择是易于随机梯度下降使用的选择。但度量标准是为人类消费而定义的，因此一个好的度量标准是您易于理解的，并且尽可能接近您希望模型执行的任务。有时，您可能会决定损失函数是一个合适的度量标准，但这并不一定是情况。</p><p>使用预训练模型时，<code>cnn_learner</code>将移除最后一层，因为该层始终是针对原始训练任务（即 ImageNet 数据集分类）专门定制的，并将其替换为一个或多个具有随机权重的新层，适合您正在处理的数据集的大小。模型的最后部分被称为<em>头</em>。</p><p>这是深度学习的关键之处——确定如何适应模型的参数以使其解决您的问题。要适应一个模型，我们必须提供至少一条信息：每个图像查看多少次（称为时代数）。您选择的时代数将在很大程度上取决于您有多少时间可用，以及您发现在实践中适应模型需要多长时间。如果选择的数字太小，您可以随时稍后进行更多时代的训练。</p><p>但为什么这种方法被称为fine_tune，而不是fit？fastai 确实有一个名为fit的方法，它确实适合一个模型（即，多次查看训练集中的图像，每次更新参数使预测越来越接近目标标签）。但在这种情况下，我们已经从一个预训练模型开始，并且我们不想丢弃它已经具有的所有这些功能。正如您将在本书中了解到的，有一些重要的技巧可以使预训练模型适应新数据集，这个过程称为微调。</p><p>微调一种迁移学习技术，通过使用与预训练不同的任务进行额外时代的训练来更新预训练模型的参数。</p><p>当您使用<code>fine_tune</code>方法时，fastai 将为您使用这些技巧。您可以设置一些参数（我们稍后会讨论），但在此处显示的默认形式中，它执行两个步骤：</p><ol><li><p>使用一个时代来适应模型的那些部分，以使新的随机头部能够正确地与您的数据集配合工作。</p></li><li><p>在调用适合整个模型的方法时，请使用请求的时代数，更快地更新后面的层（特别是头部）的权重，而不是早期的层（正如我们将看到的，通常不需要对预训练权重进行太多更改）。</p></li></ol><p>模型的<em>头部</em>是新添加的部分，专门针对新数据集。一个<em>时代</em>是对数据集的一次完整遍历。在调用<code>fit</code>之后，每个时代后的结果都会被打印出来，显示时代编号，训练和验证集的损失（用于训练模型的“性能度量”），以及您请求的任何<em>指标</em>（在这种情况下是错误率）。</p><p>因此，通过所有这些代码，我们的模型学会了仅仅通过标记的示例来识别猫和狗。但它是如何做到的呢？</p><h2 id="我们的图像识别器学到了什么"><a href="#我们的图像识别器学到了什么" class="headerlink" title="我们的图像识别器学到了什么"></a>我们的图像识别器学到了什么</h2><p>在这个阶段，我们有一个工作良好的图像识别器，但我们不知道它在做什么！尽管许多人抱怨深度学习导致不可理解的“黑匣子”模型（即，可以提供预测但没有人能理解的东西），但事实并非如此。有大量研究表明如何深入检查深度学习模型并从中获得丰富的见解。话虽如此，各种机器学习模型（包括深度学习和传统统计模型）都可能难以完全理解，特别是考虑到它们在遇到与用于训练它们的数据非常不同的数据时的行为。我们将在本书中讨论这个问题。</p><p>2013 年，博士生 Matt Zeiler 和他的导师 Rob Fergus 发表了《可视化和理解卷积网络》，展示了如何可视化模型每一层学到的神经网络权重。他们仔细分析了赢得 2012 年 ImageNet 比赛的模型，并利用这一分析大大改进了模型，使他们能够赢得 2013 年的比赛！图 1-10 是他们发表的第一层权重的图片。</p><p><img src="/image/dlcf_0110.png" alt="CNN 早期层的激活"></p><h6 id="图-1-10。CNN-第一层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）"><a href="#图-1-10。CNN-第一层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）" class="headerlink" title="图 1-10。CNN 第一层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）"></a>图 1-10。CNN 第一层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）</h6><p>这张图片需要一些解释。对于每一层，具有浅灰色背景的图像部分显示了重建的权重，底部较大的部分显示了与每组权重最匹配的训练图像部分。对于第一层，我们可以看到模型发现了代表对角线、水平和垂直边缘以及各种梯度的权重。（请注意，对于每一层，只显示了部分特征；实际上，在所有层中有成千上万个特征。）</p><p>这些是模型为计算机视觉学习的基本构建块。它们已经被神经科学家和计算机视觉研究人员广泛分析，结果表明，这些学习的构建块与人眼的基本视觉机制以及在深度学习之前开发的手工计算机视觉特征非常相似。下一层在图 1-11 中表示。</p><p><img src="/image/dlcf_0111.png" alt="CNN 早期层的激活"></p><h6 id="图-1-11。CNN-第二层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）"><a href="#图-1-11。CNN-第二层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）" class="headerlink" title="图 1-11。CNN 第二层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）"></a>图 1-11。CNN 第二层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）</h6><p>对于第 2 层，模型找到的每个特征都有九个权重重建示例。我们可以看到模型已经学会创建寻找角、重复线条、圆圈和其他简单模式的特征检测器。这些是从第一层中开发的基本构建块构建的。对于每个特征，图片右侧显示了与这些特征最匹配的实际图像的小块。例如，第 2 行第 1 列中的特定模式与日落相关的梯度和纹理相匹配。</p><p>图 1-12 显示了一篇论文中展示第 3 层特征重建结果的图片。</p><p><img src="/image/dlcf_0112.png" alt="CNN 中间层的激活"></p><h6 id="图-1-12。CNN-第三层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）"><a href="#图-1-12。CNN-第三层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）" class="headerlink" title="图 1-12。CNN 第三层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）"></a>图 1-12。CNN 第三层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）</h6><p>通过观察图片右侧，您可以看到特征现在能够识别和匹配更高级的语义组件，如汽车车轮、文字和花瓣。利用这些组件，第 4 层和第 5 层可以识别更高级的概念，如图 1-13 所示。</p><p><img src="/image/dlcf_0113.png" alt="CNN 末端层的激活"></p><h6 id="图-1-13。CNN-的第四和第五层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）"><a href="#图-1-13。CNN-的第四和第五层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）" class="headerlink" title="图 1-13。CNN 的第四和第五层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）"></a>图 1-13。CNN 的第四和第五层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）</h6><p>本文研究了一个名为<em>AlexNet</em>的旧模型，该模型只包含五层。自那时以来开发的网络可以有数百层 - 所以你可以想象这些模型开发的特征有多丰富！</p><p>当我们早期微调我们的预训练模型时，我们调整了最后几层关注的内容（花朵、人类、动物），以专注于猫与狗问题。更一般地，我们可以将这样的预训练模型专门用于许多不同的任务。让我们看一些例子。</p><h2 id="图像识别器可以处理非图像任务"><a href="#图像识别器可以处理非图像任务" class="headerlink" title="图像识别器可以处理非图像任务"></a>图像识别器可以处理非图像任务</h2><p>其中举了一些将非图像处理任务的对象转换成图像之后再处理的例子，例如声波转换为声谱。</p><h2 id="术语回顾"><a href="#术语回顾" class="headerlink" title="术语回顾"></a>术语回顾</h2><p>我们刚刚涵盖了很多信息，让我们简要回顾一下。表 1-3 提供了一个方便的词汇表。</p><p>表 1-3. 深度学习词汇表</p><div class="table-container"><table><thead><tr><th>术语</th><th>意义</th></tr></thead><tbody><tr><td>标签</td><td>我们试图预测的数据，比如“狗”或“猫”</td></tr><tr><td>架构</td><td>我们试图拟合的模型的 <em> 模板 </em>；即我们将输入数据和参数传递给的实际数学函数</td></tr><tr><td>模型</td><td>架构与特定一组参数的组合</td></tr><tr><td>参数</td><td>模型中改变任务的值，通过模型训练进行更新</td></tr><tr><td>拟合</td><td>更新模型的参数，使得使用输入数据的模型预测与目标标签匹配</td></tr><tr><td>训练</td><td><em> 拟合 </em> 的同义词</td></tr><tr><td>预训练模型</td><td>已经训练过的模型，通常使用大型数据集，并将进行微调</td></tr><tr><td>微调</td><td>为不同任务更新预训练模型</td></tr><tr><td>纪元</td><td>一次完整通过输入数据</td></tr><tr><td>损失</td><td>衡量模型好坏的指标，选择以驱动通过 SGD 进行训练</td></tr><tr><td>指标</td><td>使用验证集衡量模型好坏的测量标准，选择供人类消费</td></tr><tr><td>验证集</td><td>从训练中保留的一组数据，仅用于衡量模型好坏</td></tr><tr><td>训练集</td><td>用于拟合模型的数据；不包括验证集中的任何数据</td></tr><tr><td>过拟合</td><td>以使模型 <em> 记住 </em> 输入数据的特定特征而不是很好地泛化到训练期间未见的数据的方式训练模型</td></tr><tr><td>CNN</td><td>卷积神经网络；一种特别适用于计算机视觉任务的神经网络</td></tr></tbody></table></div><h1 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h1><ol><li><p>你需要这些来进行深度学习吗？</p><ul><li><p>很多数学 F</p></li><li><p>很多数据 T</p></li><li><p>很多昂贵的电脑 F</p></li><li><p>一个博士学位 F</p></li></ul></li><li><p>列出深度学习现在是世界上最好的工具的五个领域。</p><ul><li>图像识别</li><li>自然语言处理</li><li>图像分割</li><li>数据分析预测</li><li>用户喜好推测</li></ul></li><li><p>第一个基于人工神经元原理的设备的名称是什么？</p><ul><li>Mark 1 感知机</li></ul></li><li><p>根据同名书籍，分布式并行处理（PDP）的要求是什么？</p><ul><li><p>一组<em>处理单元</em></p></li><li><p><em>激活状态</em></p></li><li><p>每个单元的<em>输出函数</em></p></li><li><p>单位之间的<em>连接模式</em></p></li><li><p>通过网络连接传播活动模式的<em>传播规则</em></p></li><li><p>将输入与单位的当前状态相结合以产生单位输出的<em>激活规则</em></p></li><li><p>通过经验修改连接模式的<em>学习规则</em></p></li><li><p>系统必须运行的<em>环境</em></p></li></ul></li></ol><ol><li>是什么两个理论误解阻碍了神经网络领域的发展？<ul><li>使用多层设备可以解决这些限制</li><li>单层无法学习一些简单但关键的数学函数（如异或）。</li></ul></li></ol><ol><li><p>打开一个笔记本并执行包含：<code>1+1</code> 的单元格。会发生什么？</p><ul><li>会output 2</li></ul></li><li><p>跟随本章笔记本的精简版本中的每个单元格。在执行每个单元格之前，猜测会发生什么。</p></li><li><p>完成<a href="https://oreil.ly/9uPZe">Jupyter Notebook 在线附录</a>。</p></li><li><p>为什么使用传统计算机程序来识别照片中的图像很困难？</p><ul><li>需要详细说明过程的每一个细微步骤。</li></ul></li><li><p>塞缪尔所说的“权重分配”是什么意思？</p><ul><li>即通过某种方式（如随机初始化、梯度下降优化等）为权重这种参数赋予初始值，并在训练过程中调整它们，使模型能更准确地拟合数据。</li></ul></li><li><p>在深度学习中，我们通常用什么术语来表示塞缪尔所说的“权重”？</p><ul><li>参数</li></ul></li><li><p>画一幅总结塞缪尔对机器学习模型看法的图片。<br><img src="/image/dlcf_0106.png" alt=""></p></li><li><p>为什么很难理解深度学习模型为什么会做出特定的预测？</p><ul><li>深度学习模型通过多层非线性变换提取抽象特征，导致决策过程高度复杂且缺乏直观解释性。</li></ul></li><li><p>展示了一个定理的名称，该定理表明神经网络可以解决任何数学问题并达到任何精度水平是什么？</p><ul><li>度量标准</li></ul></li><li><p>为了训练模型，您需要什么？</p><ul><li>大量数据 其中需要划分出训练集和数据集</li></ul></li><li><p>反馈循环如何影响预测性警务模型的推出？</p><ul><li><p>基于过去的逮捕地点创建了一个<em>预测性执法</em>模型。实际上，这并不是在预测犯罪，而是在预测逮捕，因此部分地只是反映了现有执法过程中的偏见。然后执法人员可能会使用该模型来决定在哪里集中他们的执法活动，导致这些地区的逮捕增加。这些额外逮捕的数据将被反馈回去重新训练未来版本的模型。</p></li><li><p>这是一个<em>正反馈循环</em>：模型被使用得越多，数据就变得越有偏见，使模型变得更加有偏见，依此类推。</p></li><li><p>反馈循环也可能在商业环境中造成问题。例如，视频推荐系统可能会偏向于推荐由视频最大观看者消费的内容（例如，阴谋论者和极端分子倾向于观看比平均水平更多的在线视频内容），导致这些用户增加他们的视频消费量，进而导致更多这类视频被推荐。我们将在第三章中更详细地讨论这个话题。</p></li></ul></li><li><p>我们在猫识别模型中总是需要使用 224×224 像素的图像吗？</p><ul><li>不需要这是旧版本的遗留问题，在现在像素越高效果就会越好但所需要的时间就会更多</li></ul></li><li>分类和回归之间有什么区别？<ul><li>分类预测离散类别（如是否垃圾邮件），回归预测连续数值（如房价）</li></ul></li><li>什么是验证集？什么是测试集？为什么我们需要它们？<ul><li>简单来说就是一组模型从未见过的数据用来验证模型的训练效果，防止少量数据过度训练后导致过拟合，使得模型仅仅只是记住训练集而已。</li><li>验证集用于调参和模型选择，测试集用于最终评估模型泛化性能；两者分离以避免过拟合和确保评估客观性。</li></ul></li><li><p>如果不提供验证集，fastai 会怎么做？</p><ul><li>在valid_pct`默认设置比率fastai会将一定比率的训练集用作测试</li></ul></li><li><p>我们总是可以使用随机样本作为验证集吗？为什么或为什么不？</p><ul><li>不可以 一个随机子集是一个糟糕的选择（填补缺失太容易，且不代表你在生产中所需的）对于时间序列，选择数据的随机子集既太容易（你可以查看你试图预测的日期之前和之后的数据），又不代表大多数业务用例（在这些用例中，你使用历史数据构建模型以供将来使用）。</li></ul></li><li><p>什么是过拟合？举个例子。</p><ul><li>即使您的模型尚未完全记住所有数据，在训练的早期阶段可能已经记住了其中的某些部分。因此，您训练的时间越长，您在训练集上的准确性就会越好；验证集的准确性也会在一段时间内提高，但最终会开始变差，因为模型开始记住训练集而不是在数据中找到可泛化的潜在模式。</li></ul></li><li>什么是度量？它与损失有什么不同？<ul><li><em>度量标准</em>是一个函数，使用验证集来衡量模型预测的质量，并将在每个时期结束时打印出来。在这种情况下，我们使用<code>error_rate</code>，这是 fastai 提供的一个函数，它正是它所说的：告诉您验证集中有多少百分比的图像被错误分类。分类的另一个常见度量标准是<code>accuracy</code>（即<code>1.0 - error_rate</code>）。fastai 提供了许多其他度量标准，这将在本书中讨论。</li><li><em>性能</em>的度量被称为<em>损失</em>。</li></ul></li><li>预训练模型如何帮助？<ul><li>预训练模型通过迁移学习大幅减少新任务所需数据和训练时间，同时提升模型性能。</li></ul></li><li>模型的“头”是什么？<ul><li>使用预训练模型时，cnn_learner将移除最后一层，因为该层始终是针对原始训练任务（即 ImageNet 数据集分类）专门定制的，并将其替换为一个或多个具有随机权重的新层，适合您正在处理的数据集的大小。模型的最后部分被称为头。</li></ul></li><li><p>CNN 的早期层找到了什么样的特征？后期层呢？</p><ul><li><img src="/image/dlcf_0110.png" alt="CNN 早期层的激活"></li></ul><h6 id="图-1-10。CNN-第一层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）-1"><a href="#图-1-10。CNN-第一层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）-1" class="headerlink" title="图 1-10。CNN 第一层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）"></a>图 1-10。CNN 第一层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）</h6><p>这张图片需要一些解释。对于每一层，具有浅灰色背景的图像部分显示了重建的权重，底部较大的部分显示了与每组权重最匹配的训练图像部分。对于第一层，我们可以看到模型发现了代表对角线、水平和垂直边缘以及各种梯度的权重。（请注意，对于每一层，只显示了部分特征；实际上，在所有层中有成千上万个特征。）<br>通过观察图片右侧，您可以看到特征现在能够识别和匹配更高级的语义组件，如汽车车轮、文字和花瓣。利用这些组件，第 4 层和第 5 层可以识别更高级的概念，如图 1-13 所示。</p><p><img src="/image/dlcf_0113.png" alt="CNN 末端层的激活"></p><h6 id="图-1-13。CNN-的第四和第五层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）-1"><a href="#图-1-13。CNN-的第四和第五层的激活（由-Matthew-D-Zeiler-和-Rob-Fergus-提供）-1" class="headerlink" title="图 1-13。CNN 的第四和第五层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）"></a>图 1-13。CNN 的第四和第五层的激活（由 Matthew D. Zeiler 和 Rob Fergus 提供）</h6></li><li><p>图像模型仅对照片有用吗？</p><ul><li>否 你可以将相关的目标转换为图像后进行分析</li></ul></li><li><p>什么是架构？</p><ul><li>我们试图拟合的模型的 <em> 模板 </em>；即我们将输入数据和参数传递给的实际数学函数</li></ul></li><li><p>什么是分割？</p><ul><li>区分图片中的不同物体</li></ul></li><li><code>y_range</code> 用于什么？什么时候需要它？<ul><li>预测的是一个连续数值，而不是一个类别时。告知我们的目标范围。</li></ul></li><li>什么是超参数？<ul><li>它们是关于参数的参数，因为它们是控制权重参数含义的高级选择。</li></ul></li><li>在组织中使用 AI 时避免失败的最佳方法是什么？<ul><li>真正理解测试和验证集以及它们的重要性<h2 id="进一步研究"><a href="#进一步研究" class="headerlink" title="进一步研究"></a>进一步研究</h2></li></ul></li></ol><p>每章还有一个“进一步研究”部分，提出了一些在文本中没有完全回答的问题，或者给出了更高级的任务。这些问题的答案不在书的网站上；您需要自己进行研究！</p><ol><li><p>为什么 GPU 对深度学习有用？CPU 有什么不同之处，为什么对深度学习效果不佳？</p></li><li><p>试着想出三个反馈循环可能影响机器学习使用的领域。看看是否能找到实践中发生这种情况的文档示例。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是机器学习？&quot;&gt;&lt;a href=&quot;#什么是机器学习？&quot; class=&quot;headerlink&quot; title=&quot;什么是机器学习？&quot;&gt;&lt;/a&gt;什么是机器学习？&lt;/h2&gt;&lt;p&gt;你的分类器是一个深度学习模型。正如已经提到的，深度学习模型使用神经网络，这些神经网络最初可以</summary>
      
    
    
    
    
    <category term="Machine Learning  Deep Learning" scheme="http://example.com/tags/Machine-Learning-Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Medicalrobot</title>
    <link href="http://example.com/2025/04/22/Medicalrobot/"/>
    <id>http://example.com/2025/04/22/Medicalrobot/</id>
    <published>2025-04-22T04:43:44.000Z</published>
    <updated>2025-04-24T01:00:53.790Z</updated>
    
    
    
    
    
    <category term="ros  project  Maintain the code" scheme="http://example.com/tags/ros-project-Maintain-the-code/"/>
    
  </entry>
  
  <entry>
    <title>如何在github上写自己的blog(主要作为学习工作记录)</title>
    <link href="http://example.com/2025/04/22/blogtmp/"/>
    <id>http://example.com/2025/04/22/blogtmp/</id>
    <published>2025-04-22T02:09:55.197Z</published>
    <updated>2025-04-25T04:06:38.750Z</updated>
    
    <content type="html"><![CDATA[<h3 id="上传blog方法"><a href="#上传blog方法" class="headerlink" title="上传blog方法"></a>上传blog方法</h3><p>在md文件中写好了文档之后保存并放置在C:\Users\song\Desktop\blog\diary\source_posts文件夹中然后依次输入下列指令上传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>即可将文档上传到github</p><h3 id="本地查看方法"><a href="#本地查看方法" class="headerlink" title="本地查看方法"></a>本地查看方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo serve</span><br></pre></td></tr></table></figure><p>神奇的我让ai帮我写了一个bat现在可以一键部署了<br>您别说别的还挺好用，倍地道，嘀嘀嘀地道到…………..</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">call hexo clean</span><br><span class="line"><span class="keyword">if</span> %errorlevel% neq 0 (</span><br><span class="line">    <span class="built_in">echo</span> error：%errorlevel%</span><br><span class="line">    goto error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> generate...</span><br><span class="line">call hexo generate</span><br><span class="line"><span class="keyword">if</span> %errorlevel% neq 0 (</span><br><span class="line">    <span class="built_in">echo</span> error：%errorlevel%</span><br><span class="line">    goto error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> deploy...</span><br><span class="line">call hexo deploy</span><br><span class="line"><span class="keyword">if</span> %errorlevel% neq 0 (</span><br><span class="line">    <span class="built_in">echo</span> error：%errorlevel%</span><br><span class="line">    goto error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> [Success] all Success!!</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span> /b 0</span><br><span class="line"></span><br><span class="line">:error</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> ******************************</span><br><span class="line"><span class="built_in">echo</span> * fatal error! pls check <span class="built_in">log</span> *</span><br><span class="line"><span class="built_in">echo</span> ******************************</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span> /b 1</span><br></pre></td></tr></table></figure><p>有一说一其实应该再搞一个.sh的给linux用，但是无所谓了等要用的时候再让ai写吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;上传blog方法&quot;&gt;&lt;a href=&quot;#上传blog方法&quot; class=&quot;headerlink&quot; title=&quot;上传blog方法&quot;&gt;&lt;/a&gt;上传blog方法&lt;/h3&gt;&lt;p&gt;在md文件中写好了文档之后保存并放置在C:&#92;Users&#92;song&#92;Desktop&#92;blog&#92;</summary>
      
    
    
    
    
  </entry>
  
</feed>
